package de.embl.rieslab.simpleui;

import java.awt.Color;
import java.awt.Font;

import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;

import de.embl.rieslab.emu.ui.ConfigurablePanel;
import de.embl.rieslab.emu.ui.swinglisteners.SwingUIListeners;
import de.embl.rieslab.emu.ui.uiparameters.ColorUIParameter;
import de.embl.rieslab.emu.ui.uiparameters.IntegerUIParameter;
import de.embl.rieslab.emu.ui.uiparameters.StringUIParameter;
import de.embl.rieslab.emu.ui.uiproperties.RescaledUIProperty;
import de.embl.rieslab.emu.ui.uiproperties.TwoStateUIProperty;
import de.embl.rieslab.emu.ui.uiproperties.flag.NoFlag;
import de.embl.rieslab.emu.utils.EmuUtils;
import de.embl.rieslab.emu.utils.exceptions.IncorrectUIParameterTypeException;
import de.embl.rieslab.emu.utils.exceptions.IncorrectUIPropertyTypeException;
import de.embl.rieslab.emu.utils.exceptions.UnknownUIParameterException;
import de.embl.rieslab.emu.utils.exceptions.UnknownUIPropertyException;

public class LaserPanel extends ConfigurablePanel {
	private static final long serialVersionUID = 1L;
	
	private JLabel label;
	private JSlider slider;
	private JToggleButton tglbtnNewToggleButton;
	
	//////// Properties
	public final static String LASER_PERCENTAGE = "power percentage";
	public final static String LASER_OPERATION = "on/off";

	//////// Parameters
	public final static String PARAM_TITLE = "Name";
	public final static String PARAM_COLOR = "Color";	
	public final static String PARAM_SCALING = "Scaling";	
	public int scaling_;

	/**
	 * Create the panel.
	 */
	public LaserPanel(String title) {
		super(title);

		initComponents();
	}
	
	// This function was generated by the Eclipse WindowBuilder.
	private void initComponents() {
		setBorder(new TitledBorder(null, "Laser", TitledBorder.LEFT, TitledBorder.TOP, null, null));
		setLayout(null);
		
		label = new JLabel("70%");
		label.setBounds(10, 24, 100, 14);
		label.setFont(new Font("Tahoma", Font.BOLD, 12));
		label.setHorizontalAlignment(SwingConstants.CENTER);
		add(label);
		
		slider = new JSlider();
		slider.setBounds(10, 49, 100, 172);
		slider.setMajorTickSpacing(20);
		slider.setPaintTicks(true);
		slider.setPaintLabels(true);
		slider.setOrientation(SwingConstants.VERTICAL);
		add(slider);
		
		tglbtnNewToggleButton = new JToggleButton("On/Off");
		tglbtnNewToggleButton.setBounds(10, 231, 100, 33);
		tglbtnNewToggleButton.setFont(new Font("Tahoma", Font.BOLD, 12));
		add(tglbtnNewToggleButton);
	}

	private String getUIPropertyLabel(String property) {
		return getPanelLabel() + " " + property;
	}
	
	@Override
	protected void initializeProperties() {
		/* 
		 * In this method, we need to declare the UIProperties and 
		 * add them to the ConfigurableFrame using the method
		 * ConfigurableFrame.addUIProperty(UIProperty).
		 */
	
		String text1 = "Property changing the percentage of the laser.";
		String text2 = "Property turning the laser on and off.";

		/* 
		 * A RescaledUIProperty together with a IntUIParameter (see parameters declaration) allow 
		 * having a power percentage even if the device property (in Micro-Manager) is not a percentage
		 * (for instance "laser power (mW)").
		 */
		addUIProperty(new RescaledUIProperty(this, getUIPropertyLabel(LASER_PERCENTAGE), text1, new NoFlag()));
		
		/*
		 * A TwoStateUIProperty is appropriate for a on/off property as it takes only two states.
		 */
		addUIProperty(new TwoStateUIProperty(this, getUIPropertyLabel(LASER_OPERATION), text2, new NoFlag()));
	}

	@Override
	protected void initializeInternalProperties() {
		/* 
		 * In this method, we can declare the InternalProperties
		 * and add them to the ConfigurableFrame using the method
		 * ConfigurableFrame.addInternalProperty(InternalProperty).
		 */
		
		// In this example, we have none.
	}

	@Override
	protected void initializeParameters() {
		/* 
		 * In this method, we need to declare the UIParameters
		 * and add them to the ConfigurableFrame using the method
		 * ConfigurableFrame.addUIParameter(UIParameter).
		 */
		scaling_ = 100;
		
		/* 
		 * We retrieve the panel label (defined in the SimpleUIFrame) to set the default
		 * of the StringUIParameter corresponding to the title parameter.
		 */
		addUIParameter(new StringUIParameter(this, PARAM_TITLE, "Panel title.",getPanelLabel()));
		
		// We declare a ColorUIParameter for the title color (with default being black)
		addUIParameter(new ColorUIParameter(this, PARAM_COLOR, "Panel title color.",Color.black));
		
		/*
		 * And finally an IntegerUIParameter to get the value at 100% laser power, this value will
		 * be used to rescale the Micro-Manager device property to a percentage.
		 */
		addUIParameter(new IntegerUIParameter(this, PARAM_SCALING, "Value at 100% laser power.",scaling_));
	}

	@Override
	protected void addComponentListeners() {
		/*
		 * In this method we can add Swing actionListeners to the 
		 * JComponents or call the methods from SwingUIListeners.
		 */

		// The JSlider will update the UIProperty (percentage) and the JLabel (with a "%" suffix)
		SwingUIListeners.addActionListenerOnIntegerValue(this, getUIPropertyLabel(LASER_PERCENTAGE), slider, label, "", "%");

		/*
		 *  The JToggleButton will set the TwoStateUIProperty (on/off) to its on / off state when 
		 *  it is selected / unselected respectively.
		 */
		try {
			SwingUIListeners.addActionListenerToTwoState(this, getUIPropertyLabel(LASER_OPERATION), tglbtnNewToggleButton);
		} catch (IncorrectUIPropertyTypeException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void internalpropertyhasChanged(String propertyName) {
		/*
		 * This method is called when an InternalProperty has changed.
		 * Here we can modify the UI to reflect this change.
		 */
		
		// Here, we do not have to do anything.
	}

	@Override
	protected void propertyhasChanged(String propertyName, String newvalue) {
		/*
		 * This method is called when an UIProperty has changed.
		 * Here we can modify the UI to reflect this change.
		 */
		
		if(propertyName.equals(getUIPropertyLabel(LASER_PERCENTAGE))) { // if the change concerns the laser percentage
			// Let's test if the value is a number
			if(EmuUtils.isNumeric(newvalue)) {
				// JSlider accept only an integer, in case it is a double, we round it up
				int val = (int) Double.parseDouble(newvalue);
				
				// We make sure it is a value between 0 and 100
				if (val >= 0 && val <= 100) {
					// sets the value of the JSLider
					slider.setValue(val);
					
					// change the text of the JLabel to reflect the change
					label.setText(String.valueOf(val) + "%");
				}
			}
		} else if(propertyName.equals(getUIPropertyLabel(LASER_OPERATION))) { // if the change pertains to the laser on/off
			// the try/catch clause is necessary in case we call an unknown UIProperty
			try {
				// Gets the value of the TwoStateUIProperty's ON value.
				String onValue = ((TwoStateUIProperty) getUIProperty(getUIPropertyLabel(LASER_OPERATION))).getOnStateValue();
				
				// Selects the JToggleButton if the new value is the TwoStateUIProperty's ON value,
				// unselects it otherwise.
				tglbtnNewToggleButton.setSelected(newvalue.equals(onValue));
			} catch (UnknownUIPropertyException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	protected void parameterhasChanged(String parameterName) {
		/*
		 * This method is called when a UIProperty has changed.
		 * Here we can modify the UI to reflect this change. It
		 * is only called when the plugin is loaded or the configuration
		 * changed.
		 */
		
		if(parameterName.equals(PARAM_TITLE)){
			try {
				// retrieves the title as a String
				String title = getStringUIParameterValue(PARAM_TITLE);	
				
				// gets the TitledBorder and change its title, then updates the panel
				TitledBorder border = (TitledBorder) this.getBorder();
				border.setTitle(title);
				this.repaint();
				
			} catch (IncorrectUIParameterTypeException | UnknownUIParameterException e) {
				e.printStackTrace();
			}
		} else if(parameterName.equals(PARAM_COLOR)){
			try {
				// retrieves the color at a Color type
				Color color = getColorUIParameterValue(PARAM_COLOR);
				
				// gets the TitledBorder and change its title color, then updates the panel
				TitledBorder border = (TitledBorder) this.getBorder();
				border.setTitleColor(color);
				this.repaint();
			} catch (IncorrectUIParameterTypeException | UnknownUIParameterException e) {
				e.printStackTrace();
			}
		}  else if(parameterName.equals(PARAM_SCALING)){
			try {
		        // retrieves the scaling (maximum value of the device property)
				int scaling = getIntegerUIParameterValue(PARAM_SCALING);
		        
		        // calculates the scaling factor
				double rescaleFactor = scaling/100.;
		        
		      	// sets the slope of the scaling in the RescaledUIProperty
		        String prop_label = getUIPropertyLabel(LASER_PERCENTAGE);
				((RescaledUIProperty) this.getUIProperty(prop_label)).setScalingFactors(rescaleFactor, 0.);
			} catch (IncorrectUIParameterTypeException 
		             | UnknownUIParameterException | UnknownUIPropertyException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void shutDown() {
		/*
		 * This method is called upon closing the plugin and can be 
		 * used to reset some properties or stop running threads.
		 */
		
		// Here do nothing.
	}

	@Override
	public String getDescription() {
		/*
		 * Here, we return the description of the ConfigurablePanel,
		 * this description is used to help the user understand how the 
		 * panel works.
		 */
		return "The "+getPanelLabel()+" panel controls a single laser and allows for rapid on/off and power percentage changes.";
	}
}