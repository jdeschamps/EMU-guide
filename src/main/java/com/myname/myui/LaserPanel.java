package com.myname.myui;

import de.embl.rieslab.emu.ui.ConfigurablePanel;
import de.embl.rieslab.emu.ui.swinglisteners.SwingUIListeners;
import de.embl.rieslab.emu.ui.uiparameters.ColorUIParameter;
import de.embl.rieslab.emu.ui.uiparameters.StringUIParameter;
import de.embl.rieslab.emu.ui.uiproperties.TwoStateUIProperty;
import de.embl.rieslab.emu.ui.uiproperties.UIProperty;
import de.embl.rieslab.emu.ui.uiproperties.flag.NoFlag;
import de.embl.rieslab.emu.utils.EmuUtils;
import de.embl.rieslab.emu.utils.exceptions.IncorrectUIParameterTypeException;
import de.embl.rieslab.emu.utils.exceptions.IncorrectUIPropertyTypeException;
import de.embl.rieslab.emu.utils.exceptions.UnknownUIParameterException;
import de.embl.rieslab.emu.utils.exceptions.UnknownUIPropertyException;

import javax.swing.border.TitledBorder;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Font;
import javax.swing.SwingConstants;
import javax.swing.JSlider;
import javax.swing.JToggleButton;

public class LaserPanel extends ConfigurablePanel {
	private JLabel label_1;
	private JSlider slider;
	private JToggleButton tglbtnOnoff;
	
	//////// Constant parameter labels
	public final static String PARAM_TITLE = "Name";
	public final static String PARAM_COLOR = "Color";	
	
    //////// Constant String used in the property labels
    public final static String LASER_PERCENTAGE = "power percentage";
    public final static String LASER_OPERATION = "enable";

	public LaserPanel(String label) {
		super(label);

		initComponents();
	}
	
	// This function was generated by the Eclipse WindowBuilder.
	private void initComponents() {
		setBorder(new TitledBorder(null, "Laser", TitledBorder.LEFT, TitledBorder.TOP, null, null));
		setLayout(null);
		
		label_1 = new JLabel("70%");
		label_1.setBounds(10, 24, 100, 14);
		label_1.setFont(new Font("Tahoma", Font.BOLD, 12));
		label_1.setHorizontalAlignment(SwingConstants.CENTER);
		add(label_1);
		
		slider = new JSlider();
		slider.setBounds(10, 49, 100, 172);
		slider.setMajorTickSpacing(20);
		slider.setPaintTicks(true);
		slider.setPaintLabels(true);
		slider.setOrientation(SwingConstants.VERTICAL);
		add(slider);
		
		tglbtnOnoff = new JToggleButton("On/Off");
		tglbtnOnoff.setBounds(10, 231, 100, 33);
		tglbtnOnoff.setFont(new Font("Tahoma", Font.BOLD, 12));
		add(tglbtnOnoff);
	}

	@Override
	protected void addComponentListeners() {
		// defines variables for convenience
        String propertyName1 = getPanelLabel() + " " + LASER_PERCENTAGE;
        String propertyName2 = getPanelLabel() + " " + LASER_OPERATION;
        
        // The JSlider will update the UIProperty (percentage) and the JLabel (with a "%" suffix)
		SwingUIListeners.addActionListenerOnIntegerValue(this, propertyName1, slider, label_1, "", "%");
		
		// The JToggleButton will set the TwoStateUIProperty (on/off) to 
		// its on / off state when it is selected / unselected respectively.
		try {
			SwingUIListeners.addActionListenerToTwoState(this, propertyName2, tglbtnOnoff);
		} catch (IncorrectUIPropertyTypeException e) { // in case propertyName2 is NOT a TwoStateUIProperty
			e.printStackTrace();
		}
	}

	@Override
	public String getDescription() {
		// The description is used in the EMU menu "Plugin / Description".
		return "Panel controlling the power percentage and operation of a single laser.";
	}

	@Override
	protected void initializeInternalProperties() {
		// Do nothing: we do not have internalProperties here.
	}
	
	@Override
	protected void initializeParameters() {
		addUIParameter(new StringUIParameter(this, PARAM_TITLE, "Panel title.", this.getPanelLabel()));
		addUIParameter(new ColorUIParameter(this, PARAM_COLOR, "Laser color.", Color.black));
	}

	@Override
	protected void initializeProperties() {
		// Defines convenience variables
		String text1 = "Property changing the power percentage of the laser.";
		String text2 = "Property turning the laser on and off.";
        String propertyName1 = getPanelLabel() + " " + LASER_PERCENTAGE;
        String propertyName2 = getPanelLabel() + " " + LASER_OPERATION;
		
        // We decalre a UIProperty for the laser percentage
		addUIProperty(new UIProperty(this, propertyName1, text1, new NoFlag()));
		
		// and one for the laser on/off
		addUIProperty(new TwoStateUIProperty(this, propertyName2, text2, new NoFlag()));
	}

	@Override
	public void internalpropertyhasChanged(String arg0) {
		// Do nothing
	}

	@Override
	protected void parameterhasChanged(String parameterName) {
		if (PARAM_TITLE.equals(parameterName)) { // if title parameter
			try {
				// retrieves the TitledBorder and set its title to the title parameter value
				((TitledBorder) this.getBorder()).setTitle(getStringUIParameterValue(PARAM_TITLE));
				
				// repaints
				this.repaint();
			} catch (IncorrectUIParameterTypeException | UnknownUIParameterException e) {
				e.printStackTrace();
			}
	
		} else if (PARAM_COLOR.equals(parameterName)) { // if color parameter
			try {
				// retrieves the TitledBorder and set its title color to the color parameter value
				((TitledBorder) this.getBorder()).setTitleColor(getColorUIParameterValue(PARAM_COLOR));
				
				// repaints
				this.repaint();
			} catch (IncorrectUIParameterTypeException | UnknownUIParameterException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	protected void propertyhasChanged(String propertyName, String newvalue) {
		// convenience variables
        String propertyName1 = getPanelLabel() + " " + LASER_PERCENTAGE;
        String propertyName2 = getPanelLabel() + " " + LASER_OPERATION;
		
		if (propertyName1.equals(propertyName)) { // if the change concerns the laser percentage
			if (EmuUtils.isNumeric(newvalue)) { // we only accept numerical value (no string)
				// JSlider accept only an integer, this has the effect of rounding up the value 
				int val = (int) Double.parseDouble(newvalue); 

				// We make sure it is a value between 0 and 100
				if (val >= 0 && val <= 100) {
					// sets the value of the JSLider
					slider.setValue(val);
					
					// change the text of the JLabel to reflect the change
					label_1.setText(String.valueOf(val) + "%");
				}
			}
		} else if (propertyName2.equals(propertyName)) { // if the change pertains to the laser on/off
			try {
				// Gets the value of the TwoStateUIProperty's ON value.
				String onValue = ((TwoStateUIProperty) getUIProperty(propertyName2)).getOnStateValue();
				
				// Selects the JToggleButton if the new value is the TwoStateUIProperty's ON value,
				// unselects it otherwise.
				tglbtnOnoff.setSelected(newvalue.equals(onValue));
			} catch (UnknownUIPropertyException e) { // Necessary in case propertyName2 is NOT a TwoStateUIProperty
				e.printStackTrace();
			}
		}
	}

	@Override
	public void shutDown() {
		// Do nothing
	}
	
	protected JLabel getLabel() {
		return label_1;
	}
	protected JSlider getSlider() {
		return slider;
	}
	protected JToggleButton getTglbtnOnoff() {
		return tglbtnOnoff;
	}
}

